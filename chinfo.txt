# Zod-tester
## Date : 2022-06-30
## Author : tndev-art.com
## Description : test api platform
## Email  : contact@tndev-art.com

link to backend server  [heroku](zod-tester.herokuapp.com)

```bash
pip install
```

## Usage

```python

py -m venv venv

#  under project directory
	venv\Scripts\activate.bat
	venv\Script\deactivate.bat

 pip install Django
 django-admin startproject core

 touch requirements.txt
 cd core

 python manage.py startapp steg
 python manage.py startapp cnss


# UNDER CORE

 #  capture requirements to install
pip freeze > requirements.txt

#  install requirements from requirements.txt
pip install -r requirements.txt

python -m pip install pymongo==3.12.1
python -m pip install dnspython
pip install django_heroku
pip install gunicorn
setting
pip install django_heroku
in core/settings.py
import django_heroku
django_heroku.settings(locals())
Procfile
release: python manage.py makemigrations --no-input
release: python manage.py migrate --no-input
web: gunicorn core.wsgi
# install rest client
pip install djangorestframework

pip install httpie
http http://127.0.0.1:8000/snippets/2/
removing winkerberos==0.9.0 from requirements.txt
deploy github // heroku -- success
// adding pymongo
pip install djongo
change database setting in core/setting
 python -m pip install pymongo==3.12.1  //downgrade pymongo to work with djongo
    Hence using the following combinations did wonders for me -
Djongo v 1.3.6 Pymongo v 3.12.1 MongoDB v 5.0.5
DATABASES = {
        'default': {
            'ENGINE': 'djongo',
            'NAME': 'your-db-name',
            # 'HOST': 'localhost',
            # 'PORT': '27017'
            'CLIENT': {
                'host': 'mongodb+srv://ch:8gaapOPp3PVnPepO@cluster0.n4oli.mongodb.net/?retryWrites=true&w=majority'
            }
        }
}
python manage.py makemigrations
python manage.py migrate
```
heroku login
#heroku create zod-test
heroku config:set MONGODB_URI="mongodb+srv://ch:pass@cluster0.n4oli.mongodb.net/?retryWrites=true&w=majority"

heroku ps:scale web=1
 heroku run bash
python manage.py createsuperuser
ch123
## Contributing
Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.
pip install python-decouple
Please make sure to update tests as appropriate.
 heroku config:set SECRET_KEY="-1dxjl5esiz-ri&h^e_2sl^y#79@a&7j9bk95+!o+^d$kio-62$"
    heroku config:set MONGODB_URI="mongodb+srv://ch:pass@cluster0.n4oli.mongodb.net/?retryWrites=true&w=majority"
    heroku config:set DEBUG=True
    heroku config:set ALLOWED_HOSTS=['localhost:3000','127.0.0.1','www.reactfrontend.com','localhost:8000']
    heroku config:set DB_NAME=zod
    env file:
    SECRET_KEY=django-insecure-1dxjl5esiz-ri&h^e_2sl^y#79@a&7j9bk95+!o+^d$kio-62$
    MONGODB_URI=mongodb+srv://ch:8gaapOPp3PVnPepO@cluster0.n4oli.mongodb.net/?retryWrites=true&w=majority
    DEBUG=True
    ALLOWED_HOSTS=['localhost:3000','127.0.0.1','www.reactfrontend.com','localhost:8000']
    DB_NAME=zod

   remove from requirement.txt psycopg2==2.9.3
  remove from requirement.txt  dj-database-url==0.5.0

   delete addon from resource heroku  // very important



remove env from remote repo

Simply Run This Command.

git rm .env --cached
git commit -m "Stopped tracking .env File"


not work
It is because your .env file has been pushed to git.

You should first delete that from git and push your changes.

rm -f .env
git add .
git commit -m "remove .env file from git"
git push
core urls
from django.contrib import admin
from django.urls import path

urlpatterns = [
    path('admin/', admin.site.urls),
]
----------------------step after cloning django project ------------------------
pull the project using git
   git clone https://github.com/CryceTruly/django-rest-api.git
create a virtualenv using virtualenv
   python -m pip install --upgrade pip
   pip install virtualenv
   virtualenv venv_name
activate it now
   source venv/Scripts/activate
install dependencies from the requirements.txt file
   pip install -r requirements.txt
migrate the database tables
   python manage.py migrate
start a development server using
   python manage.py runserver
reference
User Registration (Email/Password). Django Rest Framework complete tutorial.#6
https://github.com/CryceTruly/djangoresttodo/blob/main/todolistapi/settings.py
https://www.youtube.com/watch?v=S0S0oxrses8&list=PLx-q4INfd95FWHy9M3Gt6NkUGR2R2yqT8&index=6

------------------------------------work with generic ------------------------------------
serializer---------------------------
from rest_framework.serializers import ModelSerializer
from steg.models import Facture


class FactureSerializer(ModelSerializer):
    class Meta:
        model = Facture
        fields = ('id', 'refere
model------------------------
import uuid

from django.db import models
from myhelpers.models import TrackingModel
from myauth.models import User

class Facture(TrackingModel):
    # id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    id = models.AutoField(primary_key=True)
    reference = models.CharField(max_length=60)
    etatEnc = models.CharField(max_length=8)
    etat = models.JSONField(null=True, blank=True)
    derniereFacture = models.JSONField(null=True, blank=True)
    owner = models.ForeignKey(to=User, on_delete=models.CASCADE)

    def __str__(self):
            return self.reference

view-----------------------------------

from django_filters.rest_framework.backends import DjangoFilterBackend
from steg.models import Facture
from rest_framework import permissions, filters
from steg.serializers import FactureSerializer
from rest_framework.generics import CreateAPIView, ListAPIView, ListCreateAPIView, RetrieveUpdateDestroyAPIView
from rest_framework.permissions import IsAuthenticated
from django_filters.rest_framework import DjangoFilterBackend
from steg.pagination import CustomPageNumberPagination


class StegAPIView(ListCreateAPIView):
    serializer_class = FactureSerializer
    pagination_class = CustomPageNumberPagination
    permission_classes = (IsAuthenticated,)
    filter_backends = [DjangoFilterBackend,
                       filters.SearchFilter, filters.OrderingFilter]

    filterset_fields = ['id', 'reference' ]
    search_fields = ['id', 'reference' ]
    ordering_fields = ['id', 'reference' ]

    def perform_create(self, serializer):
        return serializer.save(owner=self.request.user)

    def get_queryset(self):
        # return Facture.objects.filter(owner=self.request.user)
        return Facture.objects.all()


class StegDetailAPIView(RetrieveUpdateDestroyAPIView):
    serializer_class = FactureSerializer
    permission_classes = (IsAuthenticated,)
    lookup_field = "reference"

    def get_queryset(self):
        return Facture.objects.filter(owner=self.request.user)



pagination--------------------------------
from rest_framework import pagination


class CustomPageNumberPagination(pagination.PageNumberPagination):
    page_size = 1
    page_size_query_param = 'count'
    max_page_size = 15
    page_query_param = 'p'

--------------------------------------------
python manage.py runserver 8080
-------------------------------------------------
django base64 img-data---------------------------------------
Or maybe you have project where you donâ€™t want to deal with configuring STATIC_ROOT
and all that serving files with Django requires.

The actual Django part is pretty short:

import base64

with open(image_path, "rb") as image_file:
    image_data = base64.b64encode(image_file.read()).decode('utf-8')

ctx["image"] = image_data

return render(request, 'index.html', ctx)
Note: The "rb" option stands for "read binary".

Optionally you can add try except to catch FileNotFoundError and react accordingly.

Now we just need to display the content using <img> tag:

<img src="data:image/png;base64,{{ image }}">
------------------------------------------------------------------